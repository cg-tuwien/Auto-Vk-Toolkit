#pragma once
// ReSharper disable CppUnusedIncludeDirective

// ------ commonly used stuff from the standard library ------
#include <vector>
#include <deque>
#include <array>
#include <string>
#include <string_view>
#include <exception>
#include <stdexcept>
#include <unordered_map>
#include <unordered_set>
#include <map>
#include <stack>
#include <functional>
#include <memory>
#include <iostream>
#include <ostream>
#include <fstream>
#include <queue>
#include <algorithm>
#include <variant>
#include <iomanip>
#include <optional>
#include <typeinfo>
#include <atomic>
#include <mutex>
#include <condition_variable>
#include <cstdlib>
#include <typeindex>
#include <type_traits>
#include <utility>
#include <cstdint>
#include <chrono>
#include <filesystem>

#include <cstdio>
#include <cassert>

// ----------------------- externals -----------------------
#define FMT_HEADER_ONLY
#include <fmt/format.h>
#include <fmt/ostream.h>
#include <fmt/chrono.h>
#include <stb_image.h>

#include <assimp/Importer.hpp>  // C++ importer interface
#include <assimp/scene.h>       // Output data structure
#include <assimp/postprocess.h> // Post processing flags
#include <assimp/anim.h>

#include <nlohmann/json.hpp>

// DEFINES:
#define GLFW_INCLUDE_VULKAN
#ifdef _WIN32
#define VK_USE_PLATFORM_WIN32_KHR
#endif

// The perspective projection matrix generated by GLM will use the OpenGL depth range of -1.0 to 1.0 by default.
// We need to configure it to use the Vulkan range of 0.0 to 1.0 using the GLM_FORCE_DEPTH_ZERO_TO_ONE definition. [1]
#define GLM_FORCE_DEPTH_ZERO_TO_ONE

#define GLM_FORCE_RADIANS
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtc/quaternion.hpp>
#include <glm/ext/quaternion_float.hpp>
#include <glm/ext/quaternion_common.hpp>
#include <glm/ext/quaternion_geometric.hpp>
#include <glm/ext/quaternion_trigonometric.hpp>
#include <glm/ext/quaternion_exponential.hpp>
#include <glm/ext/quaternion_relational.hpp>
#include <glm/ext/quaternion_transform.hpp>
#include <glm/mat4x4.hpp>
#define GLM_ENABLE_EXPERIMENTAL
#include <glm/gtx/transform2.hpp>
#include <glm/gtx/hash.hpp>
#include <glm/gtx/compatibility.hpp>

#include <gli/load.hpp> // load DDS, KTX or KMG textures from files or memory.
#include <gli/core/flip.hpp>

// -------------------- windows include ---------------------
#ifdef _WIN32
// Include that after the assimp includes due to some conflict
// with the global scope operator :: in material.inl
#define NOMINMAX
#include <windows.h>
#endif

#define AVK_LOG_FATAL			LOG_ERROR_EM
#define AVK_LOG_ERROR			LOG_ERROR
#define AVK_LOG_WARNING			LOG_WARNING
#define AVK_LOG_INFO			LOG_INFO
#define AVK_LOG_VERBOSE			LOG_VERBOSE
#define AVK_LOG_DEBUG			LOG_DEBUG
#define AVK_LOG_DEBUG_VERBOSE	LOG_DEBUG_VERBOSE
#include "log.hpp"

// Before including the Auto-Vk header, we define some settings
// that influence Auto-Vk's behavior/workings:
//  - We're going to use a dynamic dispatch loader for everything
//	- We're going to use the global VULKAN_HPP_DEFAULT_DISPATCH_LOADER_DYNAMIC_STORAGE
//	  s.t. the dynamic dispatch loader is the default for all Vulkan-Hpp calls.
//  - We're going to use the VMA library for memory allocations
#define DISPATCH_LOADER_CORE_TYPE vk::DispatchLoaderDynamic
#define DISPATCH_LOADER_EXT_TYPE vk::DispatchLoaderDynamic
#define VULKAN_HPP_DISPATCH_LOADER_DYNAMIC 1
#define AVK_USE_VMA
#include "avk/avk.hpp"

// -------------------- Auto-Vk-Toolkit Includes --------------------
#include "format_for.hpp"
#include "window.hpp"
