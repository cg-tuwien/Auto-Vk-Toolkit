#version 460
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_NV_mesh_shader : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_draw_parameters: require
#extension GL_KHR_shader_subgroup_ballot: require
#include "cpu_gpu_shared_config.h"
#include "glsl_helpers.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 1) uniform CameraTransform
{
	mat4 mViewProjMatrix;
} ubo;

//-------------------------------------
#if USE_DIRECT_MESHLET
struct core_meshlet
{
	uint vertices[64];
	uint8_t indices[378];
	uint8_t vertex_count;
	uint8_t triangle_count;
};
#else
struct core_meshlet
{
	uint data_offset;
	uint8_t vertex_count;
	uint8_t triangle_count;
};
#endif

struct meshlet
{
	mat4 mTransformationMatrix;
	uint mMaterialIndex;
	uint mTexelBufferIndex;
	
	core_meshlet mGeometry;
};

layout(set = 3, binding = 0) uniform  samplerBuffer positionBuffers[];
layout(set = 3, binding = 1) uniform usamplerBuffer indexBuffers[];
layout(set = 3, binding = 2) uniform  samplerBuffer normalBuffers[];
layout(set = 3, binding = 3) uniform  samplerBuffer texCoordsBuffers[];
#if !USE_DIRECT_MESHLET
layout(set = 3, binding = 4) uniform usamplerBuffer meshletVertexIndices[];
layout(set = 3, binding = 5) uniform usamplerBuffer  meshletTriangleIndices[];
#endif
layout(set = 4, binding = 0) buffer MeshletsBuffer { meshlet values[]; } meshletsBuffer;
//-------------------------------------

// Color table for drawing each meshlet with a different color.
//
#define MAX_COLORS 10
vec3 meshletcolors[MAX_COLORS] = {
  vec3(1,0,0), 
  vec3(0,1,0),
  vec3(0,0,1),
  vec3(1,1,0),
  vec3(1,0,1),
  vec3(0,1,1),
  vec3(1,0.5,0),
  vec3(0.5,1,0),
  vec3(0,0.5,1),
  vec3(1,1,1)
};

out taskNV block
{
	uint meshletIndices[32];
};

void main() 
{
	uint meshlet_group_id = gl_WorkGroupID.x;
	uint thread_id = gl_LocalInvocationID.x;
	uint mshIdx = meshlet_group_id * 32 + thread_id;

	meshletIndices[thread_id] = mshIdx;

	if (thread_id == 0) {
		gl_TaskCountNV = 32;
	}
}
