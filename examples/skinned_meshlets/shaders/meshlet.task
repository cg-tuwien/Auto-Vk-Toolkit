#version 460
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_NV_mesh_shader : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_draw_parameters : require
#extension GL_KHR_shader_subgroup_ballot : require
#include "cpu_gpu_shared_config.h"
#include "glsl_helpers.glsl"

// 32 executions in parallel
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

out taskNV block
{
	uint meshletIndices[32];
};

void main() 
{
	// Calculate and set the meshlet index for this execution:
	uint meshlet_group_id = gl_WorkGroupID.x;
	uint thread_id = gl_LocalInvocationID.x;
	uint mshIdx = meshlet_group_id * 32 + thread_id;

	meshletIndices[thread_id] = mshIdx;

	// Here you could do some culling on a per meshlet basis and only execute the meshlet shader for the surviving ones.
	// For example backface culling or frustum culling.

	// We only need to write the task count once for all executions:
	if (thread_id == 0) {
		gl_TaskCountNV = 32;
	}
}

